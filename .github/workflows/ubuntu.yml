name: Ubuntu CI

on:
  push:
    branches: [ 'main' ]
    paths:
      - '**/*.hpp'
      - '**/*.cpp'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - 'libs/**'
      - '.github/workflows/ubuntu.yml'
  pull_request:
    branches: [ 'main' ]
    paths:
      - '**/*.hpp'
      - '**/*.cpp'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - 'libs/**'
      - '.github/workflows/ubuntu.yml'
  merge_group:

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04, ubuntu-24.04-arm ]
        compiler: [ g++-11, g++-12, g++-13, clang++-14, clang++-15, clang++-16 ]
        exclude:
          - os: ubuntu-22.04
            compiler: g++-13
          - os: ubuntu-22.04
            compiler: clang++-16
          - os: ubuntu-24.04
            compiler: clang++-14
          - os: ubuntu-24.04-arm
            compiler: g++-11
          - os: ubuntu-24.04-arm
            compiler: g++-12
          - os: ubuntu-24.04-arm
            compiler: g++-13
          - os: ubuntu-24.04-arm
            compiler: clang++-14
        include:
          - os: ubuntu-22.04
            compiler: g++-10
          - os: ubuntu-24.04
            compiler: g++-14
          - os: ubuntu-24.04
            compiler: clang++-17
          - os: ubuntu-24.04
            compiler: clang++-18
          - os: ubuntu-24.04-arm
            compiler: clang++-17
          - os: ubuntu-24.04-arm
            compiler: clang++-18

    name: ${{matrix.os}} with ${{matrix.compiler}} (${{matrix.build_type}} mode)
    runs-on: ${{matrix.os}}

    steps:
      - name: Install libraries and the respective compiler
        run: >
          sudo apt-get update &&
          sudo apt-get install -yq
          libboost-all-dev
          libtbb-dev
          ${{matrix.compiler}}

      - name: Clone Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.x'

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: '${{matrix.os}}-${{matrix.compiler}}-${{matrix.build_type}}'
          variant: ccache
          save: true
          max-size: 10G

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: >
          cmake ${{github.workspace}}
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DFICTION_ENABLE_UNITY_BUILD=ON
          -DFICTION_ENABLE_PCH=ON
          -DFICTION_CLI=ON
          -DFICTION_TEST=ON
          -DFICTION_BENCHMARK=OFF
          -DFICTION_EXPERIMENTS=ON
          -DFICTION_Z3=OFF
          -DFICTION_ALGLIB=ON
          -DFICTION_PROGRESS_BARS=OFF
          -DFICTION_WARNINGS_AS_ERRORS=OFF
          -DMOCKTURTLE_EXAMPLES=OFF

      - name: Build cda-tum-siqad-plugins
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{matrix.build_type}} -j2

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{matrix.build_type}} --verbose
